name: Lighthouse Accessibility Audit

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm turbo run build --filter=web

      - name: Start Next.js server
        run: |
          cd apps/web
          pnpm next start &
          sleep 5

      - name: Run Lighthouse CI
        id: lighthouse
        run: |
          npx @lhci/cli autorun --collect.settings.chromeFlags="--no-sandbox" > lighthouse_output.txt 2>&1 || true
          echo "LIGHTHOUSE_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          cat lighthouse_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # レポートURLを抽出
          REPORT_URL=$(grep -o 'https://storage.googleapis.com[^[:space:]]*' lighthouse_output.txt | head -1 || echo "レポートURLが見つかりませんでした")
          echo "REPORT_URL=$REPORT_URL" >> $GITHUB_OUTPUT
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment PR with Lighthouse Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `${{ steps.lighthouse.outputs.LIGHTHOUSE_OUTPUT }}`;
            const reportUrl = `${{ steps.lighthouse.outputs.REPORT_URL }}`;
            
            // アクセシビリティスコアを抽出
            const scoreMatch = output.match(/categories:accessibility.*?(\d+)/);
            const score = scoreMatch ? scoreMatch[1] : '不明';
            
            const body = `## 🔍 Lighthouse アクセシビリティ監査結果
            
**アクセシビリティスコア**: ${score}%

📊 **詳細レポート**: [Lighthouseレポートを確認する](${reportUrl})

${output.includes('Assertion failed') ? '❌ **監査失敗**: アクセシビリティ基準を満たしていません。' : '✅ **監査成功**: アクセシビリティ基準を満たしています。'}

<details>
<summary>詳細ログを表示</summary>

\`\`\`
${output}
\`\`\`

</details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });